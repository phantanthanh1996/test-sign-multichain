'use strict';
let elliptic = require('elliptic');
let sha256 = require('sha256');
var crypto = require('crypto'),
    secp256k1 = require('secp256k1');
let ec = new elliptic.ec('secp256k1');
var OPS = {
    "OP_PUSHDATA1": 76,
    "OP_PUSHDATA2": 77,
    "OP_PUSHDATA4": 78,
    "OP_DUP": 118,
    "OP_HASH160": 169,
    "OP_EQUALVERIFY": 136,
    "OP_CHECKSIG": 172
};

var signTransaction = function(transaction, publicKey, privateKey) {
    /*
    var ripemd160Hash = ripemd160(sha256(publicKey));

    var chunks = [];
    chunks.push(uint8Buffer(OPS.OP_DUP));
    chunks.push(uint8Buffer(OPS.OP_HASH160));
    chunks.push(pushDataIntBuffer(ripemd160Hash.length));
    chunks.push(ripemd160Hash);
    chunks.push(uint8Buffer(OPS.OP_EQUALVERIFY));
    chunks.push(uint8Buffer(OPS.OP_CHECKSIG));

    transaction.vin[0].script = Buffer.concat(chunks);

    var hashType = 0x01;  // SIGHASH_ALL
    */
    // let keyPair = ec.genKeyPair();
    var EC = require("elliptic").ec;
    var ec = new EC("secp256k1");

    var shaMsg = crypto.createHash("sha256").update(myData.toString()).digest();
    var mySign = ec.sign(shaMsg, privateKey, {canonical: true});
    let keyPair = ec.keyFromPrivate("97ddae0f3a25b92268175400149d65d6887b9cefaf28ea2c078e05cdc15a3c0a");
    let privKey = keyPair.getPrivate("hex");
    let pubKey = keyPair.getPublic();
    console.log(`Private key: ${privKey}`);
    console.log("Public key :", pubKey.encode("hex").substr(2));
    console.log("Public key (compressed):",
        pubKey.encodeCompressed("hex"));
    var signatureDER = "";
    var signLength = "";
    var scriptpubkey = "76a914bdcb506680dbefb103ff101c9770d1b4248c391c88ac0c73706b67640000000000000075";
    var rawtransaction = transaction.slice(0, 82) +  scriptpubkey.length + scriptpubkey + transaction.slice(84, transaction.length - 84) + "01000000";
    while(signLength !== '47') {
        //var hashForSignature = hash256(Buffer.concat([toBuffer(transaction), uint32Buffer(hashType)]));
        var hashForSignature = sha256(sha256(rawtransaction));
        let signature = ec.sign(hashForSignature, privKey, "hex", {canonical: true});
        //var signature = secp256k1.sign(hashForSignature, privateKey).signature;
        //signatureDER = secp256k1.signatureExport(signature);
        //console.log('signature', signature.toString('hex'));
        //console.log('signature DER', signatureDER.toString('hex'));
        signLength = (byteToHexString(signature).length / 2 + 1).toString(16);
        //signLength = "47";
        console.log(signLength);
    }
    var hashtype = "01";
    //var scriptSignature = Buffer.concat([signatureDER, uint8Buffer(hashType)]); // public key hash input
    //console.log('script signature', scriptSignature.toString('hex'));
    //var scriptSig = Buffer.concat([pushDataIntBuffer(scriptSignature.length), scriptSignature, pushDataIntBuffer(publicKey.length), publicKey]);
    //console.log('script sig', scriptSig.toString('hex'));
    //transaction.vin[0].script = scriptSig;

    //var signedTransaction = toBuffer(transaction);
    var scriptSig = signLength + signatureDER + hashtype + publicKey.length + publicKey;
    var scriptsigLenght = hexStringToByte(scriptSig).length.toString('hex');
    var signedTransaction = transaction.slice(0, 82) +  scriptsigLenght + scriptSig + transaction.slice(84, transaction.length - 84);
    console.log('signed hex string', signedTransaction);
};
function hexToString (hex) {
    var string = '';
    for (var i = 0; i < hex.length; i += 2) {
        string += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    }
    return string;
}
function toBuffer(transaction) {
    var chunks = [];

    chunks.push(uint32Buffer(transaction.version));
    chunks.push(varIntBuffer(transaction.vin.length));

    transaction.vin.forEach(function (txIn) {
        var hash = [].reverse.call(new Buffer(txIn.txid, 'hex'));
        chunks.push(hash);
        chunks.push(uint32Buffer(txIn.vout)); // index

        if (txIn.script != null) {
            chunks.push(varIntBuffer(txIn.script.length));
            chunks.push(txIn.script);
        } else {
            chunks.push(varIntBuffer(0));
        }

        chunks.push(uint32Buffer(txIn.sequence));
    });

    chunks.push(varIntBuffer(transaction.vout.length));
    transaction.vout.forEach(function (txOut) {
        chunks.push(uint64Buffer(txOut.value));

        var script = Buffer.from(txOut.scriptPubKey.hex, 'hex');

        chunks.push(varIntBuffer(script.length));
        chunks.push(script);
    });

    chunks.push(uint32Buffer(transaction.locktime));

    return Buffer.concat(chunks);
}
function byteToHexString(uint8arr) {
    if (!uint8arr) {
        return '';
    }

    var hexStr = '';
    for (var i = 0; i < uint8arr.length; i++) {
        var hex = (uint8arr[i] & 0xff).toString(16);
        hex = (hex.length === 1) ? '0' + hex : hex;
        hexStr += hex;
    }

    return hexStr.toUpperCase();
}

function hexStringToByte(str) {
    if (!str) {
        return new Uint8Array();
    }

    var a = [];
    for (var i = 0, len = str.length; i < len; i+=2) {
        a.push(parseInt(str.substr(i,2),16));
    }

    return new Uint8Array(a);
}
/*
signTransaction({
    "txid" : "aef20228d8b125e5cf37f860d5b885a8d9ed2bcc8edd096cff66f447921bba2a",
    "version" : 1,
    "locktime" : 0,
    "vin" : [
        {
            "txid" : "e5dff45ada7d0a9be6e95a5ead12178df199079effabf1247850cc4c2f127e3c",
            "vout" : 0,
            "scriptSig" : {
                "asm" : "",
                "hex" : ""
            },
            "sequence" : 4294967295
        }
    ],
    "vout" : [
        {
            "value" : 0.00000000,
            "n" : 0,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 4f885fdc96ed9e04e8fd75408e3a32fb34301ede OP_EQUALVERIFY OP_CHECKSIG 73706b718d1712ad5e5ae9e69b0a7dda5af4dfe50100000000000000 OP_DROP",
                "hex" : "76a9144f885fdc96ed9e04e8fd75408e3a32fb34301ede88ac1c73706b718d1712ad5e5ae9e69b0a7dda5af4dfe5010000000000000075",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1BkTPeuUdi5N1okqwktzuACsAG6Bn4sG1EJ2mF"
                ]
            },
            "assets" : [
                {
                    "name" : "AD",
                    "issuetxid" : "e5dff45ada7d0a9be6e95a5ead12178df199079effabf1247850cc4c2f127e3c",
                    "assetref" : "2269-267-57317",
                    "qty" : 1.00000000,
                    "raw" : 1,
                    "type" : "transfer"
                }
            ],
            "permissions" : [
            ],
            "items" : [
            ]
        },
        {
            "value" : 0.00000000,
            "n" : 1,
            "scriptPubKey" : {
                "asm" : "OP_DUP OP_HASH160 bdcb506680dbefb103ff101c9770d1b4248c391c OP_EQUALVERIFY OP_CHECKSIG 73706b718d1712ad5e5ae9e69b0a7dda5af4dfe56300000000000000 OP_DROP",
                "hex" : "76a914bdcb506680dbefb103ff101c9770d1b4248c391c88ac1c73706b718d1712ad5e5ae9e69b0a7dda5af4dfe5630000000000000075",
                "reqSigs" : 1,
                "type" : "pubkeyhash",
                "addresses" : [
                    "1SenweB4LkEBAXkRWRgA9peX1iykJZrNPVe7ax"
                ]
            },
            "assets" : [
                {
                    "name" : "AD",
                    "issuetxid" : "e5dff45ada7d0a9be6e95a5ead12178df199079effabf1247850cc4c2f127e3c",
                    "assetref" : "2269-267-57317",
                    "qty" : 99.00000000,
                    "raw" : 99,
                    "type" : "transfer"
                }
            ],
            "permissions" : [
            ],
            "items" : [
            ]
        }
    ],
    "data" : [
    ]
}, Buffer.from('02514a3cf26dd847b2dac2b4a02e093a6ef7a3f930dc33c6760c3a92b00e71dae2', 'hex'), Buffer.from('bfd9f92d1c040160efd8f25bacc2823d4f8e3241efed856b1e8d521aacd88fb7', 'hex'));
*/
signTransaction("01000000013c7e122f4ccc507824f1abff9e0799f18d1712ad5e5ae9e69b0a7dda5af4dfe50000000000ffffffff0200000000000000003776a9144f885fdc96ed9e04e8fd75408e3a32fb34301ede88ac1c73706b718d1712ad5e5ae9e69b0a7dda5af4dfe501000000000000007500000000000000003776a914bdcb506680dbefb103ff101c9770d1b4248c391c88ac1c73706b718d1712ad5e5ae9e69b0a7dda5af4dfe563000000000000007500000000", '02514a3cf26dd847b2dac2b4a02e093a6ef7a3f930dc33c6760c3a92b00e71dae2', 'bfd9f92d1c040160efd8f25bacc2823d4f8e3241efed856b1e8d521aacd88fb7');
